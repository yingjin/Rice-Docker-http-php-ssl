<IfModule mod_ssl.c>
    #
    # Set ServerTokens to Prod
    # Reduce Server HTTP Header to the minimum product (Apache) rather than
    # showing detailed version information of the server and operating system
    #
    ServerTokens ${APACHE_SERVER_TOKENS}

    #
    # Remove the footer from error pages, which details the version numbers
    #
    ServerSignature ${APACHE_SERVER_SIGNATURE}

    <VirtualHost _default_:${APACHE_SSL_PORT}>
        ServerAdmin ${APACHE_SERVER_ADMIN}
        ServerName ${APACHE_SERVER_NAME}:${APACHE_SSL_PORT}
        ServerAlias localhost

        DocumentRoot ${APACHE_DOCUMENT_ROOT}

        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
        # error, crit, alert, emerg.
        # It is also possible to configure the loglevel for particular
        # modules, e.g.

        LogLevel ${APACHE_LOG_LEVEL} ssl:${APACHE_SSL_LOG_LEVEL}

        # Use separate log files for the SSL virtual host; note that LogLevel
        # is not inherited from httpd.conf.
        # ErrorLog "|/usr/sbin/rotatelogs ${APACHE_LOG_DIR}/${APACHE_SERVER_NAME}_error.%Y-%m-%d.log 86400 -360"
        # CustomLog "|/usr/sbin/rotatelogs ${APACHE_LOG_DIR}/${APACHE_SERVER_NAME}_access.%Y-%m-%d.log 86400 -360" combined

        ErrorLog ${APACHE_LOG_DIR}/${APACHE_SERVER_NAME}_error.log
        CustomLog ${APACHE_LOG_DIR}/${APACHE_SERVER_NAME}_access.log "%h %{SSL_PROTOCOL}x %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\""

        # For most configuration files from conf-available/, which are
        # enabled or disabled at a global level, it is possible to
        # include a line for only one particular virtual host. For example the
        # following line enables the CGI configuration for this host only
        # after it has been globally disabled with "a2disconf".
        #Include conf-available/serve-cgi-bin.conf

        # This directive toggles the usage of the SSL/TLS Protocol
        # Engine for proxy. This is usually used inside a <VirtualHost>
        # section to enable SSL/TLS for proxy usage in a particular
        # virtual host. By default the SSL/TLS Protocol Engine is disabled
        # for proxy both for the main server and all configured virtual hosts.
        # Note that the SSLProxyEngine directive should not, in general,
        # be included in a virtual host that will be acting as a forward
        # proxy (using <Proxy> or ProxyRequests directives).
        # SSLProxyEngine is not required to enable a forward proxy server
        # to proxy SSL/TLS requests.
        #SSLProxyEngine ${APACHE_SSL_SSL_PROXY_ENGINE}

        # Configure host name checking for remote server certificates
        # for more info https://httpd.apache.org/docs/2.4/mod/mod_ssl.html#sslproxycheckpeername
        SSLProxyCheckPeerName ${APACHE_SSL_PROXY_CHECK_PEER_NAME}

        #   SSL Engine Switch:
        #   Enable/Disable SSL for this virtual host.
        SSLEngine on

        #   A self-signed (snakeoil) certificate can be created by installing
        #   the ssl-cert package. See
        #   /usr/share/doc/apache2/README.Debian.gz for more info.
        #   If both key and certificate are stored in the same file, only the
        #   SSLCertificateFile directive is needed.
        SSLCertificateFile      /etc/ssl/certs/${APACHE_SSL_CERTS}
        SSLCertificateKeyFile /etc/ssl/private/${APACHE_SSL_PRIVATE}

        #   Server Certificate Chain:
        #   Point SSLCertificateChainFile at a file containing the
        #   concatenation of PEM encoded CA certificates which form the
        #   certificate chain for the server certificate. Alternatively
        #   the referenced file can be the same as SSLCertificateFile
        #   when the CA certificates are directly appended to the server
        #   certificate for convinience.
        #SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt

        #   Certificate Authority (CA):
        #   Set the CA certificate verification path where to find CA
        #   certificates for client authentication or alternatively one
        #   huge file containing all of them (file must be PEM encoded)
        #   Note: Inside SSLCACertificatePath you need hash symlinks
        #                to point to the certificate files. Use the provided
        #                Makefile to update the hash symlinks after changes.
        #SSLCACertificatePath /etc/ssl/certs/
        #SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt
        SSLCACertificateFile /etc/ssl/certs/ca-certificates.crt

        #   Certificate Revocation Lists (CRL):
        #   Set the CA revocation path where to find CA CRLs for client
        #   authentication or alternatively one huge file containing all
        #   of them (file must be PEM encoded)
        #   Note: Inside SSLCARevocationPath you need hash symlinks
        #                to point to the certificate files. Use the provided
        #                Makefile to update the hash symlinks after changes.
        #SSLCARevocationPath /etc/apache2/ssl.crl/
        #SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

        #
        # Relax access to content within /var/www.
        #
        <Directory "/var/www/html">
            AllowOverride None
            # Allow open access:
            Require all granted
        </Directory>

        # Further relax access to the default document root:
        <Directory "/var/www/html">
            #
            # Possible values for the Options directive are "None", "All",
            # or any combination of:
            #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
            #
            # Note that "MultiViews" must be named *explicitly* --- "Options All"
            # doesn't give it to you.
            #
            # The Options directive is both complicated and important.  Please see
            # http://httpd.apache.org/docs/2.4/mod/core.html#options
            # for more information.
            #
            #Options Indexes FollowSymLinks
            Options Indexes FollowSymLinks Includes

            #
            # AllowOverride controls what directives may be placed in .htaccess files.
            # It can be "All", "None", or any combination of the keywords:
            #   Options FileInfo AuthConfig Limit
            #
            #AllowOverride None
            AllowOverride All

            #
            # Controls who can get stuff from this server.
            #
            Require all granted
        </Directory>
        <Location />
            SSLOptions +StrictRequire
            SSLRequireSSL

            SSLRequire %{HTTP_HOST} eq "${APACHE_SERVER_NAME}"
            ErrorDocument 403 https://${APACHE_SERVER_NAME}
        </Location>

        # uncomment this to show a maintenance page instead of DSpace.
        #AliasMatch .* "${APACHE_DOCUMENT_ROOT}/help/maintenance.html"
        #ProxyPass / !

        # uncomment this to temporarily prevent logins for maintenance.
        #AliasMatch ^/[a-z\-]*login.* "${APACHE_DOCUMENT_ROOT}/help/nologin.html"
        #ProxyPass /login !
        #ProxyPass /ldap-login !
        #ProxyPass /password-login !


        AliasMatch ^/streaming(/.*)?$ "${APACHE_DOCUMENT_ROOT}/streaming$1"
        #AliasMatch ^/streaming/(/.*/[a-zA-Z0-9]/.*)?$ "${APACHE_DOCUMENT_ROOT}/streaming$1"
        #ProxyPass /streaming !

        AliasMatch ^/help(/.*)?$ "${APACHE_DOCUMENT_ROOT}/help$1"
        ProxyPass /help !

       AliasMatch ^/thumbnail(/.*)?$ "${APACHE_DOCUMENT_ROOT}/thumbnail$1"
        ProxyPass /thumbnail !

        AliasMatch ^/help(/.*)?$ "${APACHE_DOCUMENT_ROOT}/help$1"
        ProxyPass /help !

        AliasMatch ^/ohms(/.*)?$ "${APACHE_DOCUMENT_ROOT}/ohms$1"
        ProxyPass /ohms !

        <Directory "${APP_BASE_PATH}/webapps/xmlui/static">
            AllowOverride None
            Options None
            Require all granted
        </Directory>
        # improves efficiency and also fixes security hole
        AliasMatch ^/static(/.*)?$ "${APP_BASE_PATH}/webapps/xmlui/static$1"
        ProxyPass /static !


        # make old URLs for texts still work.
        # do this with rewrite instead of alias because each alias has to include
        #  a corresponding line to keep it from getting preempted by proxy, and
        #  that's annoying (plus ProxyPassMatch only works in 2.2.5 or later,
        #  and when I wrote this, I was only running 2.2.2).
        RewriteEngine on
        #   RewriteCond %{HTTPS} !on
        #   RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
        RewriteRule ^/jsp/(.*)\.teiap\.html$ /jsp/$1.tei.html [R=permanent]
        RewriteRule ^/jsp/(.*)\.tei_full\.html$ /jsp/$1.tei-timea.html [R=permanent]

        # redirect JSP-style RSS requests to manakin URL layout
        # old and broken: RewriteRule feed/(rss_[12]\.0)/(.+) feed/$2/$1 [R]
        # redirect all non xml text JSP traffic to same url at Manakin
        RewriteRule ^/jsp/(?!xml)(.*) /$1 [R]

        # 2016-03-14 fix DSpace bug until future patch released
        RewriteRule ^/+themes/.*:.*$ /error [R=permanent,L]


        <Directory "${APACHE_DOCUMENT_ROOT}/streaming">
           Options FollowSymLinks
           AllowOverride None

           # deny from everyone unless they match a later Allow.
           Require all granted
        </Directory>

       # add TEI static content dir
        <Directory "${APP_BASE_PATH}/tei/static">
            AllowOverride None
            Options None
            Require all granted
        </Directory>
        AliasMatch ^/tei-static/(.*)?$ "${APP_BASE_PATH}/tei/static/$1"
        ProxyPass /tei-static !

        <Location /solr>
        # this is important because solr has absolutely no built-in security
          Options None
            Require all denied
        </Location>

        BrowserMatch "MSIE [2-5]" \
             nokeepalive ssl-unclean-shutdown \
             downgrade-1.0 force-response-1.0

        SSLOptions +ExportCertData

        ProxyPass / ajp://${TOMCAT_INST}:8009/
        ProxyPassReverse / ajp://${TOMCAT_INST}:8009/

      </VirtualHost>
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
